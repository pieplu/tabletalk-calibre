#!/usr/bin/env python2
# vim:fileencoding=utf-8
from calibre import strftime
from calibre.web.feeds.recipes import BasicNewsRecipe
from mechanize import Request
import json


class Tabltalk(BasicNewsRecipe):

    appURL = 'https://tabletalkmagazine.com/'
    title = 'Tabletalk'
    __author__ = 'Ligonier'
    description = 'Tabletalk is a monthly magazine dedicated to helping you grow in Christ.'
    needs_subscription = False
    no_stylesheets = True
    remove_tags = [dict(attrs={'class':['social-share', 'share-buttons']}),
                dict(id=['footer']),
                dict(name=['script', 'noscript', 'header'])]
    remove_tags_after = [dict(attrs={'class':['post-content-wrapper']})]
    extra_css = 'svg {width:40px;height:40px;fill:#D3D0CC}'
    
    def getIssueJson(self, issueId):
        br = BasicNewsRecipe.get_browser(self)
        post_url = self.appURL + "/wp-admin/admin-ajax.php"
        payload = "------WebKitFormBoundary7MA4YWxkTrZu0gW\r\nContent-Disposition: form-data; name=\"id\"\r\n\r\n"+ issueId +"\r\n------WebKitFormBoundary7MA4YWxkTrZu0gW\r\nContent-Disposition: form-data; name=\"action\"\r\n\r\nissue_toc\r\n------WebKitFormBoundary7MA4YWxkTrZu0gW\r\nContent-Disposition: form-data; name=\"dataType\"\r\n\r\njson\r\n------WebKitFormBoundary7MA4YWxkTrZu0gW--"
        headers = {
            'content-type': "multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW",
            'cache-control': "no-cache",
            'X-HTTP-Method-Override': 'POST',
            'X-Requested-With': 'XMLHttpRequest'
            }
        rq = Request(post_url, headers=headers, data=payload)
        r = br.open(rq)
        if r.code != 200:
            raise ValueError('Failed POST request')
        return json.loads(r.read())


    def parse_index(self):
        baseURL = self.appURL
        soup = self.index_to_soup(baseURL + "magazine/")
        features = []
        columns = []
        issueName = ""
        ans = []
        issueId = 0

        issueId = soup.find('div', attrs={"data-issue-id": True})["data-issue-id"]
        data = self.getIssueJson(issueId)

        issueName = data.get("issue_title")
        self.title = issueName + ' - Tabletalk'
        self.cover_url = data.get("issue_image")
        self.description = data.get("issue_date") + " - " + data.get("issue_link")
        
        for featuredArticle in data.get("featured_articles"):
            url = featuredArticle["post_link"]
            title = featuredArticle["post_title"]
            author = featuredArticle["post_author"]
            description = ''
            pubdate = data.get("issue_date")
            features.append(
                dict(title=title, url=url, date=pubdate, description=description, content='', author=author))
        
        for columnsArticle in data.get("columns"):
            url = featuredArticle["post_link"]
            title = featuredArticle["post_title"]
            author = featuredArticle["post_author"]
            description = ''
            pubdate = data.get("issue_date")
            columns.append(
                dict(title=title, url=url, date=pubdate, description=description, content='', author=author))

        ans = [('Features', features), ('Columns', columns)]

        print "========================"
        return ans
