#!/usr/bin/env python2
# vim:fileencoding=utf-8
from calibre import strftime
from calibre.web.feeds.recipes import BasicNewsRecipe
from mechanize import Request
import json

tt_year = "2017"
tt_month = "07"

class Tabltalk(BasicNewsRecipe):

    appURL = 'https://tabletalkmagazine.com/'
    title = 'Tabletalk archive'
    publisher = 'Ligonier Ministries'
    __author__ = 'pieplu'
    description = 'Download a past issue of Tabletalk magazine'
    needs_subscription = False
    no_stylesheets = True
    timefmt = ' - %B %Y'
    remove_tags = [dict(attrs={'class':['social-share', 'share-buttons', "social-share naked-social-share","share-buttons share-buttons--footer","naked-social-share", "social-share__icons", 'article__number']}),
                dict(id=['footer']),
                dict(name=['script', 'noscript', 'header', 'style'])]
    remove_tags_after = [dict(attrs={'class':['post-content-wrapper']})]
    extra_css = ('.tt-quote{font-weight:bolder;font-size:1.2em;text-align:center;}'
                '.article__footer{text-align:center;font-size:.9em;}.article__footer:before{content:"";width:4em;height:.2em;display:block;background:#D3D0CC}'
                '.article__number{color:#D3D0CC;font-family:sans-serif;}.article__number hr{display:none;}.article__number p{display:inline-block;}'
                '.header-base__column{display:inline-block;font-family:sans-serif;}.header-base__column--first{padding-right:1em;}'
                'h5{text-transform:uppercase;font-size:1em;color:#444444}')
                
    conversion_options = {'publisher': publisher}

                
    def getIssueJson(self, issueId):
        br = BasicNewsRecipe.get_browser(self)
        post_url = self.appURL + "/wp-admin/admin-ajax.php"
        payload = ("------WebKitFormBoundary7MA4YWxkTrZu0gW\r\nContent-Disposition: form-data; name=\"id\"\r\n\r\n"+ issueId +"\r\n"
                    "------WebKitFormBoundary7MA4YWxkTrZu0gW\r\nContent-Disposition: form-data; name=\"action\"\r\n\r\nissue_toc\r\n"
                    "------WebKitFormBoundary7MA4YWxkTrZu0gW\r\nContent-Disposition: form-data; name=\"dataType\"\r\n\r\njson\r\n"
                    "------WebKitFormBoundary7MA4YWxkTrZu0gW--")
        headers = {
            'content-type': "multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW",
            'cache-control': "no-cache",
            'X-HTTP-Method-Override': 'POST',
            'X-Requested-With': 'XMLHttpRequest'
            }
        rq = Request(post_url, headers=headers, data=payload)
        r = br.open(rq)
        if r.code != 200:
            raise ValueError('Failed POST request')
        return json.loads(r.read())


    def getIssuesOfYearJson(self, year):
        br = BasicNewsRecipe.get_browser(self)
        post_url = self.appURL + "/wp-admin/admin-ajax.php"
        payload = ("------WebKitFormBoundary7MA4YWxkTrZu0gW\r\nContent-Disposition: form-data; name=\"year\"\r\n\r\n" + year + "\r\n"
                    "------WebKitFormBoundary7MA4YWxkTrZu0gW\r\nContent-Disposition: form-data; name=\"action\"\r\n\r\nissues_by_year\r\n"
                    "------WebKitFormBoundary7MA4YWxkTrZu0gW\r\nContent-Disposition: form-data; name=\"dataType\"\r\n\r\njson\r\n"
                    "------WebKitFormBoundary7MA4YWxkTrZu0gW\r\nContent-Disposition: form-data; name=\"post_type\"\r\n\r\nissue\r\n"
                    "------WebKitFormBoundary7MA4YWxkTrZu0gW\r\nContent-Disposition: form-data; name=\"ppp\"\r\n\r\n-1\r\n"
                    "------WebKitFormBoundary7MA4YWxkTrZu0gW--")
        headers = {
            'content-type': "multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW",
            'cache-control': "no-cache",
            'X-HTTP-Method-Override': 'POST',
            'X-Requested-With': 'XMLHttpRequest'
            }

        rq = Request(post_url, headers=headers, data=payload)
        r = br.open(rq)
        if r.code != 200:
            raise ValueError('Failed POST request')
        return json.loads(r.read())


    def parse_index(self):
        baseURL = self.appURL
        features = []
        columns = []
        dailystudies = [] 
        issueName = ""
        ans = []
        issueId = 0

        issuesOfYear = self.getIssuesOfYearJson(tt_year)
        issueIndex = issuesOfYear.get("post_count") - int(tt_month)
        issueData = issuesOfYear.get("issues")[issueIndex]
        issueId = str(issueData.get("id"))
        issueName = issueData.get("title")
        self.title = issueName + ' - Tabletalk'
        self.cover_url = issueData.get("image")
        self.description = issueData.get("date_desktop") + " - " + issueData.get("permalink")
        self.timefmt = ' - ' + issueData.get("date_desktop")
        
        data = self.getIssueJson(issueId)
        
        for articlesSansDailies in data.get("articles_sans_dailies"):
            url = articlesSansDailies["url"]
            title = articlesSansDailies["title"]
            author = articlesSansDailies["after"]
            description = articlesSansDailies["before"] or ''
            pubdate = data.get("issue_date")
            if articlesSansDailies["content_type"] == 'feature':
                features.append(
                    dict(title=title, url=url, date=pubdate, description=description, content='', author=author))
            elif articlesSansDailies["content_type"] == 'column:':
                columns.append(
                    dict(title=title, url=url, date=pubdate, description=description, content='', author=author))
        
        for featuredArticle in data.get("featured_articles"):
            url = featuredArticle["post_link"]
            title = featuredArticle["post_title"]
            author = featuredArticle["post_author"]
            description = ''
            pubdate = data.get("issue_date")
            features.append(
                dict(title=title, url=url, date=pubdate, description=description, content='', author=author))
        
        for columnsArticle in data.get("columns"):
            url = columnsArticle["post_link"]
            title = columnsArticle["post_title"]
            author = columnsArticle["post_author"]
            description = ''
            pubdate = data.get("issue_date")
            columns.append(
                dict(title=title, url=url, date=pubdate, description=description, content='', author=author))
        
        for dailyArticle in data.get("daily_studies"):
            url = dailyArticle["post_link"]
            title = dailyArticle["post_day"] + " " + data.get("issue_date")
            author = ""
            description = ""
            pubdate = dailyArticle["post_day"] + " " + data.get("issue_date")
            dailystudies.append(
                dict(title=title, url=url, date=pubdate, description=description, content='', author=author))

        ans = [('Features', features), ('Columns', columns), ('Daily Studies', dailystudies)]

        return ans

    def postprocess_html(self, soupe, first_fetch):
        for cit in soupe.findAll("div", attrs={"class": re.compile("pull-quote__quote")}):
            cit.name = "blockquote"
            cit['class'] = "tt-quote"
        
        artNb = soupe.find("div", attrs={"class": re.compile("article__number")})
        if artNb is not None:
            artNb.find("hr").extract()

        toc = soupe.find("div", attrs={"class": re.compile("toc__toggle")})
        if toc is not None:
            toc.find("img").extract()
            toc.find("button").extract()

        tocMobile = soupe.find("div", attrs={"class": re.compile("toc__toggle--mobile")})
        if tocMobile is not None:
            tocMobile.extract()

        t = soupe.find("svg")
        if t is not None:
            t['width'] = '2em'
            t['height'] = '2em'
            t['fill'] = 'currentColor'
            t['style'] = 'vertical-align: middle;'
            t['xmlns'] = t['xmlns:xmlns'] 
            del t['xmlns:xmlns'] #important to avoid xml error on ibooks or Kobo readers

        return soupe
